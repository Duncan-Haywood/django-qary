###########
# BUILDER #
###########

FROM python:3.7.0-alpine as builder

WORKDIR /usr/src/app

# prevent python interpreter from writing of .pyc files and buffering of stdout/err
# equivalent to: `python -B -u`
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN apk update && apk add postgresql-dev gcc python3-dev musl-dev

# copy django project from host (including requirements.txt) into container
COPY . /usr/src/app/

RUN pip install --upgrade pip && RUN pip install flake8
# lint (PEP8 style check)
# F401=unused import ; E501=line too long
# SEE: flake8.pycqa.org/en/2.6.0/warnings.html#error-codes
RUN flake8 --max-line-length=150 --ignore=E501,F401 .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.7.0-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir -p $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

COPY ./migrate_db.prod.sh $APP_HOME

# copy project
COPY . $APP_HOME

RUN chown -R app:app $APP_HOME

USER app

ENTRYPOINT ["/home/app/web/migrate_db.prod.sh"]
